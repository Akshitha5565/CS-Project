Python 3.13.1 (tags/v3.13.1:0671451, Dec  3 2024, 19:06:28) [MSC v.1942 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> from PIL import Image
... 
... # Convert text to binary
... def text_to_binary(message):
...     return ''.join(format(ord(char), '08b') for char in message)
... 
... # Convert binary to text
... def binary_to_text(binary_data):
...     all_bytes = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
...     return ''.join([chr(int(byte, 2)) for byte in all_bytes])
... 
... # Encode secret message into image
... def encode_image(input_image_path, output_image_path, secret_message):
...     image = Image.open(input_image_path)
...     binary_message = text_to_binary(secret_message + "###")  # Add delimiter
...     data_index = 0
... 
...     if image.mode != 'RGB':
...         image = image.convert('RGB')
... 
...     pixels = list(image.getdata())
...     new_pixels = []
... 
...     for pixel in pixels:
        r, g, b = pixel
        if data_index < len(binary_message):
            r = (r & ~1) | int(binary_message[data_index])
            data_index += 1
        if data_index < len(binary_message):
            g = (g & ~1) | int(binary_message[data_index])
            data_index += 1
        if data_index < len(binary_message):
            b = (b & ~1) | int(binary_message[data_index])
            data_index += 1
        new_pixels.append((r, g, b))

    image.putdata(new_pixels)
    image.save(output_image_path)
    print(f"Message encoded successfully and saved to {output_image_path}")

# Decode hidden message from image
def decode_image(stego_image_path):
    image = Image.open(stego_image_path)
    if image.mode != 'RGB':
        image = image.convert('RGB')

    pixels = list(image.getdata())
    binary_data = ""

    for pixel in pixels:
        for color in pixel[:3]:
            binary_data += str(color & 1)

    all_bytes = [binary_data[i:i+8] for i in range(0, len(binary_data), 8)]
    decoded_message = ""
    for byte in all_bytes:
        char = chr(int(byte, 2))
        decoded_message += char
        if decoded_message.endswith("###"):
            break

    return decoded_message[:-3]  # Remove delimiter

# Example usage
if __name__ == "__main__":
    # Replace these with your actual image file paths
